name: Build and Push Multi-Architecture Docker Images

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: 'true'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: manticoresoftware/rust-min-libc
  RUST_VERSION: "1.86.0"
  AMD64_GLIBC_VERSION: "2.17"
  AMD64_OPENSSL_VERSION: "1.0.1u"
  ARM64_GLIBC_VERSION: "2.28"
  ARM64_OPENSSL_VERSION: "1.1.1w"

jobs:
  build-amd64:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      amd64-tag: ${{ steps.tags.outputs.amd64-tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        run: |
          # Try custom authentication first if variables are provided
          if [ -n "$GHCR_USER" ]; then
            echo "Using custom GHCR credentials..."
            echo "$GHCR_PASSWORD" | docker login -u"$GHCR_USER" --password-stdin ghcr.io
          else
            echo "Using GitHub token authentication..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u"${{ github.actor }}" --password-stdin ghcr.io
          fi
          
          # Verify authentication worked
          if ! (docker info | grep Username) > /dev/null 2>&1; then
            echo "Can't authorise to GHCR docker registry"
            exit 1
          fi
          
          echo "‚úÖ Successfully authenticated to GitHub Container Registry"
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_PASSWORD: ${{ secrets.GHCR_PASSWORD }}

      - name: Generate AMD64 tag
        id: tags
        run: |
          AMD64_TAG="amd64-rust${{ env.RUST_VERSION }}-glibc${{ env.AMD64_GLIBC_VERSION }}-openssl${{ env.AMD64_OPENSSL_VERSION }}"
          echo "amd64-tag=${AMD64_TAG}" >> $GITHUB_OUTPUT
          echo "### AMD64 Build" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${AMD64_TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platform**: linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "**Runner**: ubuntu-24.04" >> $GITHUB_STEP_SUMMARY

      - name: Build and push AMD64 image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_images != 'false') }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.amd64-tag }}
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64

  build-arm64:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      arm64-tag: ${{ steps.tags.outputs.arm64-tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        run: |
          # Try custom authentication first if variables are provided
          if [ -n "$GHCR_USER" ]; then
            echo "Using custom GHCR credentials..."
            echo "$GHCR_PASSWORD" | docker login -u"$GHCR_USER" --password-stdin ghcr.io
          else
            echo "Using GitHub token authentication..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u"${{ github.actor }}" --password-stdin ghcr.io
          fi
          
          # Verify authentication worked
          if ! (docker info | grep Username) > /dev/null 2>&1; then
            echo "Can't authorise to GHCR docker registry"
            exit 1
          fi
          
          echo "‚úÖ Successfully authenticated to GitHub Container Registry"
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_PASSWORD: ${{ secrets.GHCR_PASSWORD }}

      - name: Generate ARM64 tag
        id: tags
        run: |
          ARM64_TAG="aarch64-rust${{ env.RUST_VERSION }}-glibc${{ env.ARM64_GLIBC_VERSION }}-openssl${{ env.ARM64_OPENSSL_VERSION }}"
          echo "arm64-tag=${ARM64_TAG}" >> $GITHUB_OUTPUT
          echo "### ARM64 Build" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ARM64_TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platform**: linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "**Runner**: ubuntu-24.04-arm" >> $GITHUB_STEP_SUMMARY

      - name: Build and push ARM64 image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_images != 'false') }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.arm64-tag }}
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64

  verify-build:
    runs-on: ubuntu-24.04
    needs: [build-amd64, build-arm64]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read

    steps:
      - name: Verify and summarize
        run: |
          echo "### üéâ Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Both images have been built and pushed successfully using native runners:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Built Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- **AMD64**: Built on \`ubuntu-24.04\` (native x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- **ARM64**: Built on \`ubuntu-24.04-arm\` (native aarch64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull AMD64 image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-amd64.outputs.amd64-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull ARM64 image" >> $GITHUB_STEP_SUMMARY  
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-arm64.outputs.arm64-tag }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Usage Examples:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Force specific architecture" >> $GITHUB_STEP_SUMMARY
          echo "docker run --platform linux/amd64 --rm -v \"\$(pwd)\":/src \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-amd64.outputs.amd64-tag }} build --release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "docker run --platform linux/arm64 --rm -v \"\$(pwd)\":/src \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-arm64.outputs.arm64-tag }} build --release" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Inspect Images:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-amd64.outputs.amd64-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-arm64.outputs.arm64-tag }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Package visibility reminder
        run: |
          echo "‚ÑπÔ∏è Remember to make the package public in GitHub settings:"
          echo "https://github.com/manticoresoftware/manticore/pkgs/container/rust-min-libc/settings"
