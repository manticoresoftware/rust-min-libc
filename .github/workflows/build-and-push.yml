name: Build and Push Multi-Architecture Docker Images

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: 'true'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: manticoresoftware/rust-min-libc
  RUST_VERSION: "1.86.0"
  AMD64_GLIBC_VERSION: "2.17"
  AMD64_OPENSSL_VERSION: "1.0.1u"
  ARM64_GLIBC_VERSION: "2.28"
  ARM64_OPENSSL_VERSION: "1.1.1w"

jobs:
  build-amd64:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      amd64-tag: ${{ steps.tags.outputs.amd64-tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        run: |
          # Try custom authentication first if variables are provided
          if [ -n "$GHCR_USER" ]; then
            echo "Using custom GHCR credentials..."
            echo "$GHCR_PASSWORD" | docker login -u"$GHCR_USER" --password-stdin ghcr.io
          else
            echo "Using GitHub token authentication..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u"${{ github.actor }}" --password-stdin ghcr.io
          fi
          
          # Verify authentication worked
          if ! (docker info | grep Username) > /dev/null 2>&1; then
            echo "‚ùå Can't authorise to GHCR docker registry"
            exit 1
          fi
          
          # Show who we're authenticated as
          AUTH_USER=$(docker info | grep Username | awk '{print $2}' || echo "unknown")
          echo "‚úÖ Successfully authenticated to GitHub Container Registry as: $AUTH_USER"
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_PASSWORD: ${{ secrets.GHCR_PASSWORD }}

      - name: Generate AMD64 tag
        id: tags
        run: |
          AMD64_TAG="amd64-rust${{ env.RUST_VERSION }}-glibc${{ env.AMD64_GLIBC_VERSION }}-openssl${{ env.AMD64_OPENSSL_VERSION }}"
          echo "amd64-tag=${AMD64_TAG}" >> $GITHUB_OUTPUT
          echo "### AMD64 Build" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${AMD64_TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platform**: linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "**Runner**: ubuntu-24.04" >> $GITHUB_STEP_SUMMARY

      - name: Build and push AMD64 image
        id: build
        run: |
          AMD64_TAG="${{ steps.tags.outputs.amd64-tag }}"
          
          # Create and use a new buildx builder instance
          docker buildx create --name multiarch-builder --use 2>/dev/null || docker buildx use multiarch-builder
          
          # Determine if we should push
          SHOULD_PUSH="${{ github.event_name != 'pull_request' && (github.event.inputs.push_images != 'false') }}"
          
          if [ "$SHOULD_PUSH" = "true" ]; then
            echo "Building and pushing AMD64 to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${AMD64_TAG}"
            
            docker buildx build \
              --platform linux/amd64 \
              --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${AMD64_TAG}" \
              --push \
              --progress=plain \
              .
            
            BUILD_RESULT=$?
            if [ $BUILD_RESULT -eq 0 ]; then
              echo "‚úÖ AMD64 build and push completed successfully"
            else
              echo "‚ùå AMD64 build and push failed with exit code: $BUILD_RESULT"
              exit 1
            fi
            
            # Verify the image was pushed
            echo "üîç Verifying AMD64 image was pushed..."
            sleep 10
            
            if docker pull "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${AMD64_TAG}" >/dev/null 2>&1; then
              echo "‚úÖ AMD64 image confirmed in registry (can pull)"
              docker rmi "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${AMD64_TAG}" >/dev/null 2>&1 || true
            else
              echo "‚ùå AMD64 image NOT found in registry (cannot pull)"
              echo "This might be a temporary registry delay, checking with buildx inspect..."
              if docker buildx imagetools inspect "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${AMD64_TAG}" >/dev/null 2>&1; then
                echo "‚úÖ AMD64 image found via buildx imagetools"
              else
                echo "‚ùå AMD64 image verification failed completely"
                exit 1
              fi
            fi
          else
            echo "Building AMD64 locally (no push)"
            docker buildx build \
              --platform linux/amd64 \
              --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${AMD64_TAG}" \
              --load \
              .
            echo "‚úÖ AMD64 loaded locally"
          fi

  build-arm64:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      arm64-tag: ${{ steps.tags.outputs.arm64-tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        run: |
          # Try custom authentication first if variables are provided
          if [ -n "$GHCR_USER" ]; then
            echo "Using custom GHCR credentials..."
            echo "$GHCR_PASSWORD" | docker login -u"$GHCR_USER" --password-stdin ghcr.io
          else
            echo "Using GitHub token authentication..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u"${{ github.actor }}" --password-stdin ghcr.io
          fi
          
          # Verify authentication worked
          if ! (docker info | grep Username) > /dev/null 2>&1; then
            echo "‚ùå Can't authorise to GHCR docker registry"
            exit 1
          fi
          
          # Show who we're authenticated as
          AUTH_USER=$(docker info | grep Username | awk '{print $2}' || echo "unknown")
          echo "‚úÖ Successfully authenticated to GitHub Container Registry as: $AUTH_USER"
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_PASSWORD: ${{ secrets.GHCR_PASSWORD }}

      - name: Generate ARM64 tag
        id: tags
        run: |
          ARM64_TAG="aarch64-rust${{ env.RUST_VERSION }}-glibc${{ env.ARM64_GLIBC_VERSION }}-openssl${{ env.ARM64_OPENSSL_VERSION }}"
          echo "arm64-tag=${ARM64_TAG}" >> $GITHUB_OUTPUT
          echo "### ARM64 Build" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ARM64_TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platform**: linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "**Runner**: ubuntu-24.04-arm" >> $GITHUB_STEP_SUMMARY

      - name: Build and push ARM64 image
        id: build
        run: |
          ARM64_TAG="${{ steps.tags.outputs.arm64-tag }}"
          
          # Create and use a new buildx builder instance
          docker buildx create --name multiarch-builder --use 2>/dev/null || docker buildx use multiarch-builder
          
          # Determine if we should push
          SHOULD_PUSH="${{ github.event_name != 'pull_request' && (github.event.inputs.push_images != 'false') }}"
          
          if [ "$SHOULD_PUSH" = "true" ]; then
            echo "Building and pushing ARM64 to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ARM64_TAG}"
            
            docker buildx build \
              --platform linux/arm64 \
              --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ARM64_TAG}" \
              --push \
              --progress=plain \
              .
            
            BUILD_RESULT=$?
            if [ $BUILD_RESULT -eq 0 ]; then
              echo "‚úÖ ARM64 build and push completed successfully"
            else
              echo "‚ùå ARM64 build and push failed with exit code: $BUILD_RESULT"
              exit 1
            fi
            
            # Verify the image was pushed
            echo "üîç Verifying ARM64 image was pushed..."
            sleep 10
            
            if docker pull "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ARM64_TAG}" >/dev/null 2>&1; then
              echo "‚úÖ ARM64 image confirmed in registry (can pull)"
              docker rmi "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ARM64_TAG}" >/dev/null 2>&1 || true
            else
              echo "‚ùå ARM64 image NOT found in registry (cannot pull)"
              echo "This might be a temporary registry delay, checking with buildx inspect..."
              if docker buildx imagetools inspect "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ARM64_TAG}" >/dev/null 2>&1; then
                echo "‚úÖ ARM64 image found via buildx imagetools"
              else
                echo "‚ùå ARM64 image verification failed completely"
                exit 1
              fi
            fi
          else
            echo "Building ARM64 locally (no push)"
            # Note: Can't load ARM64 on non-ARM machines
            CURRENT_ARCH=$(docker version --format '{{.Server.Arch}}')
            if [ "$CURRENT_ARCH" = "arm64" ]; then
              docker buildx build \
                --platform linux/arm64 \
                --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${ARM64_TAG}" \
                --load \
                .
              echo "‚úÖ ARM64 loaded locally"
            else
              echo "‚ö†Ô∏è  Skipping ARM64 local load (can't load ARM64 on ${CURRENT_ARCH} machine)"
              echo "    ARM64 image built and cached, use --push to publish to registry"
            fi
          fi

  verify-build:
    runs-on: ubuntu-24.04
    needs: [build-amd64, build-arm64]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read

    steps:
      - name: Verify and summarize
        run: |
          echo "### üéâ Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Both images have been built and pushed successfully using native runners:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Built Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- **AMD64**: Built on \`ubuntu-24.04\` (native x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- **ARM64**: Built on \`ubuntu-24.04-arm\` (native aarch64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull AMD64 image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-amd64.outputs.amd64-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull ARM64 image" >> $GITHUB_STEP_SUMMARY  
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-arm64.outputs.arm64-tag }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Usage Examples:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Force specific architecture" >> $GITHUB_STEP_SUMMARY
          echo "docker run --platform linux/amd64 --rm -v \"\$(pwd)\":/src \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-amd64.outputs.amd64-tag }} build --release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "docker run --platform linux/arm64 --rm -v \"\$(pwd)\":/src \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-arm64.outputs.arm64-tag }} build --release" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Inspect Images:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-amd64.outputs.amd64-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-arm64.outputs.arm64-tag }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Package visibility reminder
        run: |
          echo "‚ÑπÔ∏è Remember to make the package public in GitHub settings:"
          echo "https://github.com/manticoresoftware/manticore/pkgs/container/rust-min-libc/settings"